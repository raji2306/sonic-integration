apiVersion: v1
kind: Namespace
metadata:
  name: devops
---
# ConfigMap for backend DB URL
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  namespace: devops
data:
  SPRING_DATASOURCE_URL: "jdbc:mysql://devops-db.cfwus0g4m3bn.ap-south-1.rds.amazonaws.com:3306/devops"
---
# Secret for DB username/password
apiVersion: v1
kind: Secret
metadata:
  name: rds-secret
  namespace: devops
type: Opaque
stringData:
  SPRING_DATASOURCE_USERNAME: "admin"
  SPRING_DATASOURCE_PASSWORD: "admin123*"
---
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: devops
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: raji2306/spring-image:44
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          env:
            - name: SPRING_DATASOURCE_URL
              valueFrom:
                configMapKeyRef:
                  name: backend-config
                  key: SPRING_DATASOURCE_URL
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: rds-secret
                  key: SPRING_DATASOURCE_USERNAME
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: rds-secret
                  key: SPRING_DATASOURCE_PASSWORD
            - name: SPRING_JPA_HIBERNATE_DDL_AUTO
              value: "update"
            - name: SPRING_JPA_SHOW_SQL
              value: "true"
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
          resources:
            requests:
              cpu: "250m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
---
# Backend Service (ClusterIP)
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: devops
spec:
  type: ClusterIP
  selector:
    app: backend
  ports:
    - port: 8080
      targetPort: 8080
---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: devops
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: raji2306/react-image:44
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
          env:
            - name: REACT_APP_SPRING_BOOT_URL
              value: "http://a930a7335d5d844889bad01e20115f9c-f925a712e7194a98.elb.ap-south-1.amazonaws.com/api"
          readinessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            requests:
              cpu: "250m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
---
# Frontend Service (ClusterIP)
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: devops
spec:
  type: ClusterIP
  selector:
    app: frontend
  ports:
    - port: 80
      targetPort: 3000
---
# Ingress with rewrite-target
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: devops-ingress
  namespace: devops
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  rules:
    - host: "a930a7335d5d844889bad01e20115f9c-f925a712e7194a98.elb.ap-south-1.amazonaws.com"
      http:
        paths:
          - path: /api(/|$)(.*)
            pathType: Prefix
            backend:
              service:
                name: backend
                port:
                  number: 8080
          - path: /(.*)
            pathType: Prefix
            backend:
              service:
                name: frontend
                port:
                  number: 80
